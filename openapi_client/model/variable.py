"""
    CureDAO Unified Health API

    A platform for participant-centered research and personal data exploration  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

import nulltype  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)

def lazy_import():
    from openapi_client.model.card import Card
    from openapi_client.model.data_source import DataSource
    from openapi_client.model.tracking_reminder_notification_action import TrackingReminderNotificationAction
    from openapi_client.model.unit import Unit
    from openapi_client.model.variable_category import VariableCategory
    from openapi_client.model.variable_charts import VariableCharts
    globals()['Card'] = Card
    globals()['DataSource'] = DataSource
    globals()['TrackingReminderNotificationAction'] = TrackingReminderNotificationAction
    globals()['Unit'] = Unit
    globals()['VariableCategory'] = VariableCategory
    globals()['VariableCharts'] = VariableCharts


class Variable(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('combination_operation',): {
            'MEAN': "MEAN",
            'SUM': "SUM",
        },
        ('filling_type',): {
            'NONE': "none",
            'ZERO-FILLING': "zero-filling",
            'VALUE-FILLING': "value-filling",
        },
        ('variable_category_name',): {
            'ACTIVITY': "Activity",
            'BOOKS': "Books",
            'CAUSES_OF_ILLNESS': "Causes of Illness",
            'COGNITIVE_PERFORMANCE': "Cognitive Performance",
            'CONDITIONS': "Conditions",
            'EMOTIONS': "Emotions",
            'ENVIRONMENT': "Environment",
            'FOODS': "Foods",
            'GOALS': "Goals",
            'LOCATIONS': "Locations",
            'MISCELLANEOUS': "Miscellaneous",
            'MOVIES_AND_TV': "Movies and TV",
            'MUSIC': "Music",
            'NUTRIENTS': "Nutrients",
            'PAYMENTS': "Payments",
            'PHYSICAL_ACTIVITIES': "Physical Activities",
            'PHYSIQUE': "Physique",
            'SLEEP': "Sleep",
            'SOCIAL_INTERACTIONS': "Social Interactions",
            'SOFTWARE': "Software",
            'SYMPTOMS': "Symptoms",
            'TREATMENTS': "Treatments",
            'VITAL_SIGNS': "Vital Signs",
        },
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (int,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'user_id': (int,),  # noqa: E501
            'variable_id': (int,),  # noqa: E501
            'action_array': ([TrackingReminderNotificationAction],),  # noqa: E501
            'alias': (str,),  # noqa: E501
            'available_units': ([Unit],),  # noqa: E501
            'best_study_link': (str,),  # noqa: E501
            'best_study_card': (Card,),  # noqa: E501
            'best_user_study_link': (str,),  # noqa: E501
            'best_user_study_card': (Card,),  # noqa: E501
            'best_population_study_link': (str,),  # noqa: E501
            'best_population_study_card': (Card,),  # noqa: E501
            'optimal_value_message': (str,),  # noqa: E501
            'common_optimal_value_message': (str,),  # noqa: E501
            'user_optimal_value_message': (str,),  # noqa: E501
            'card': (Card,),  # noqa: E501
            'cause_only': (bool,),  # noqa: E501
            'charts': (VariableCharts,),  # noqa: E501
            'charts_link_dynamic': (str,),  # noqa: E501
            'charts_link_email': (str,),  # noqa: E501
            'charts_link_facebook': (str,),  # noqa: E501
            'charts_link_google': (str,),  # noqa: E501
            'charts_link_static': (str,),  # noqa: E501
            'charts_link_twitter': (str,),  # noqa: E501
            'child_common_tag_variables': ([Variable],),  # noqa: E501
            'child_user_tag_variables': ([Variable],),  # noqa: E501
            'client_id': (str,),  # noqa: E501
            'combination_operation': (str,),  # noqa: E501
            'common_alias': (str,),  # noqa: E501
            'common_tagged_variables': ([Variable],),  # noqa: E501
            'common_tag_variables': ([Variable],),  # noqa: E501
            'created_at': (str,),  # noqa: E501
            'data_source_names': (str,),  # noqa: E501
            'data_sources': ([DataSource],),  # noqa: E501
            'description': (str,),  # noqa: E501
            'display_name': (str,),  # noqa: E501
            'duration_of_action': (int,),  # noqa: E501
            'duration_of_action_in_hours': (float,),  # noqa: E501
            'earliest_filling_time': (int,),  # noqa: E501
            'earliest_measurement_time': (int,),  # noqa: E501
            'earliest_source_time': (int,),  # noqa: E501
            'error_message': (str,),  # noqa: E501
            'experiment_end_time': (str,),  # noqa: E501
            'experiment_start_time': (str,),  # noqa: E501
            'filling_type': (str,),  # noqa: E501
            'filling_value': (float,),  # noqa: E501
            'icon_icon': (str,),  # noqa: E501
            'image_url': (str,),  # noqa: E501
            'informational_url': (str,),  # noqa: E501
            'ingredient_of_common_tag_variables': ([Variable],),  # noqa: E501
            'ingredient_common_tag_variables': ([Variable],),  # noqa: E501
            'ingredient_of_user_tag_variables': ([Variable],),  # noqa: E501
            'ingredient_user_tag_variables': ([Variable],),  # noqa: E501
            'input_type': (str,),  # noqa: E501
            'ion_icon': (str,),  # noqa: E501
            'joined_common_tag_variables': ([Variable],),  # noqa: E501
            'joined_user_tag_variables': ([Variable],),  # noqa: E501
            'join_with': (int,),  # noqa: E501
            'kurtosis': (float,),  # noqa: E501
            'last_processed_daily_value': (float,),  # noqa: E501
            'last_successful_update_time': (str,),  # noqa: E501
            'last_value': (float,),  # noqa: E501
            'latest_filling_time': (int,),  # noqa: E501
            'latest_measurement_time': (int,),  # noqa: E501
            'latest_source_time': (int,),  # noqa: E501
            'latest_user_measurement_time': (int,),  # noqa: E501
            'latitude': (float,),  # noqa: E501
            'location': (str,),  # noqa: E501
            'longitude': (float,),  # noqa: E501
            'manual_tracking': (bool,),  # noqa: E501
            'maximum_allowed_daily_value': (float,),  # noqa: E501
            'maximum_allowed_value': (float,),  # noqa: E501
            'maximum_recorded_daily_value': (float,),  # noqa: E501
            'maximum_recorded_value': (float,),  # noqa: E501
            'mean': (float,),  # noqa: E501
            'measurements_at_last_analysis': (int,),  # noqa: E501
            'median': (float,),  # noqa: E501
            'minimum_allowed_value': (float,),  # noqa: E501
            'minimum_allowed_daily_value': (float,),  # noqa: E501
            'minimum_non_zero_value': (float,),  # noqa: E501
            'minimum_recorded_value': (float,),  # noqa: E501
            'most_common_connector_id': (int,),  # noqa: E501
            'most_common_original_unit_id': (int,),  # noqa: E501
            'most_common_unit_id': (int,),  # noqa: E501
            'most_common_value': (float,),  # noqa: E501
            'number_of_aggregate_correlations_as_cause': (int,),  # noqa: E501
            'number_of_aggregate_correlations_as_effect': (int,),  # noqa: E501
            'number_of_changes': (int,),  # noqa: E501
            'number_of_correlations': (int,),  # noqa: E501
            'number_of_correlations_as_cause': (int,),  # noqa: E501
            'number_of_correlations_as_effect': (int,),  # noqa: E501
            'number_of_processed_daily_measurements': (int,),  # noqa: E501
            'number_of_raw_measurements': (int,),  # noqa: E501
            'number_of_tracking_reminders': (int,),  # noqa: E501
            'number_of_unique_daily_values': (float,),  # noqa: E501
            'number_of_unique_values': (int,),  # noqa: E501
            'number_of_user_correlations_as_cause': (int,),  # noqa: E501
            'number_of_user_correlations_as_effect': (int,),  # noqa: E501
            'number_of_user_variables': (int,),  # noqa: E501
            'onset_delay': (int,),  # noqa: E501
            'onset_delay_in_hours': (float,),  # noqa: E501
            'outcome': (bool,),  # noqa: E501
            'outcome_of_interest': (bool,),  # noqa: E501
            'parent_common_tag_variables': ([Variable],),  # noqa: E501
            'parent_user_tag_variables': ([Variable],),  # noqa: E501
            'png_path': (str,),  # noqa: E501
            'png_url': (str,),  # noqa: E501
            'predictor_of_interest': (int,),  # noqa: E501
            'price': (float,),  # noqa: E501
            'product_url': (str,),  # noqa: E501
            'public': (bool,),  # noqa: E501
            'question': (str,),  # noqa: E501
            'long_question': (str,),  # noqa: E501
            'raw_measurements_at_last_analysis': (int,),  # noqa: E501
            'second_most_common_value': (float,),  # noqa: E501
            'second_to_last_value': (float,),  # noqa: E501
            'share_user_measurements': (bool,),  # noqa: E501
            'skewness': (float,),  # noqa: E501
            'standard_deviation': (float,),  # noqa: E501
            'status': (str,),  # noqa: E501
            'subtitle': (str,),  # noqa: E501
            'svg_url': (str,),  # noqa: E501
            'third_most_common_value': (float,),  # noqa: E501
            'third_to_last_value': (float,),  # noqa: E501
            'tracking_instructions': (str,),  # noqa: E501
            'tracking_instructions_card': (Card,),  # noqa: E501
            'unit': (Unit,),  # noqa: E501
            'unit_abbreviated_name': (str,),  # noqa: E501
            'unit_category_id': (int,),  # noqa: E501
            'unit_category_name': (str,),  # noqa: E501
            'unit_id': (int,),  # noqa: E501
            'unit_name': (str,),  # noqa: E501
            'upc': (str,),  # noqa: E501
            'updated': (int,),  # noqa: E501
            'updated_at': (str,),  # noqa: E501
            'updated_time': (str,),  # noqa: E501
            'user_tagged_variables': ([Variable],),  # noqa: E501
            'user_tag_variables': ([Variable],),  # noqa: E501
            'user_variable_unit_abbreviated_name': (str,),  # noqa: E501
            'user_variable_unit_category_id': (int,),  # noqa: E501
            'user_variable_unit_category_name': (str,),  # noqa: E501
            'user_variable_unit_id': (int,),  # noqa: E501
            'user_variable_unit_name': (str,),  # noqa: E501
            'variable_category': (VariableCategory,),  # noqa: E501
            'joined_variables': ([Variable],),  # noqa: E501
            'valence': (str,),  # noqa: E501
            'variable_category_id': (int,),  # noqa: E501
            'variable_category_name': (str,),  # noqa: E501
            'variable_name': (str,),  # noqa: E501
            'variance': (float,),  # noqa: E501
            'wikipedia_title': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'name': 'name',  # noqa: E501
        'user_id': 'userId',  # noqa: E501
        'variable_id': 'variableId',  # noqa: E501
        'action_array': 'actionArray',  # noqa: E501
        'alias': 'alias',  # noqa: E501
        'available_units': 'availableUnits',  # noqa: E501
        'best_study_link': 'bestStudyLink',  # noqa: E501
        'best_study_card': 'bestStudyCard',  # noqa: E501
        'best_user_study_link': 'bestUserStudyLink',  # noqa: E501
        'best_user_study_card': 'bestUserStudyCard',  # noqa: E501
        'best_population_study_link': 'bestPopulationStudyLink',  # noqa: E501
        'best_population_study_card': 'bestPopulationStudyCard',  # noqa: E501
        'optimal_value_message': 'optimalValueMessage',  # noqa: E501
        'common_optimal_value_message': 'commonOptimalValueMessage',  # noqa: E501
        'user_optimal_value_message': 'userOptimalValueMessage',  # noqa: E501
        'card': 'card',  # noqa: E501
        'cause_only': 'causeOnly',  # noqa: E501
        'charts': 'charts',  # noqa: E501
        'charts_link_dynamic': 'chartsLinkDynamic',  # noqa: E501
        'charts_link_email': 'chartsLinkEmail',  # noqa: E501
        'charts_link_facebook': 'chartsLinkFacebook',  # noqa: E501
        'charts_link_google': 'chartsLinkGoogle',  # noqa: E501
        'charts_link_static': 'chartsLinkStatic',  # noqa: E501
        'charts_link_twitter': 'chartsLinkTwitter',  # noqa: E501
        'child_common_tag_variables': 'childCommonTagVariables',  # noqa: E501
        'child_user_tag_variables': 'childUserTagVariables',  # noqa: E501
        'client_id': 'clientId',  # noqa: E501
        'combination_operation': 'combinationOperation',  # noqa: E501
        'common_alias': 'commonAlias',  # noqa: E501
        'common_tagged_variables': 'commonTaggedVariables',  # noqa: E501
        'common_tag_variables': 'commonTagVariables',  # noqa: E501
        'created_at': 'createdAt',  # noqa: E501
        'data_source_names': 'dataSourceNames',  # noqa: E501
        'data_sources': 'dataSources',  # noqa: E501
        'description': 'description',  # noqa: E501
        'display_name': 'displayName',  # noqa: E501
        'duration_of_action': 'durationOfAction',  # noqa: E501
        'duration_of_action_in_hours': 'durationOfActionInHours',  # noqa: E501
        'earliest_filling_time': 'earliestFillingTime',  # noqa: E501
        'earliest_measurement_time': 'earliestMeasurementTime',  # noqa: E501
        'earliest_source_time': 'earliestSourceTime',  # noqa: E501
        'error_message': 'errorMessage',  # noqa: E501
        'experiment_end_time': 'experimentEndTime',  # noqa: E501
        'experiment_start_time': 'experimentStartTime',  # noqa: E501
        'filling_type': 'fillingType',  # noqa: E501
        'filling_value': 'fillingValue',  # noqa: E501
        'icon_icon': 'iconIcon',  # noqa: E501
        'image_url': 'imageUrl',  # noqa: E501
        'informational_url': 'informationalUrl',  # noqa: E501
        'ingredient_of_common_tag_variables': 'ingredientOfCommonTagVariables',  # noqa: E501
        'ingredient_common_tag_variables': 'ingredientCommonTagVariables',  # noqa: E501
        'ingredient_of_user_tag_variables': 'ingredientOfUserTagVariables',  # noqa: E501
        'ingredient_user_tag_variables': 'ingredientUserTagVariables',  # noqa: E501
        'input_type': 'inputType',  # noqa: E501
        'ion_icon': 'ionIcon',  # noqa: E501
        'joined_common_tag_variables': 'joinedCommonTagVariables',  # noqa: E501
        'joined_user_tag_variables': 'joinedUserTagVariables',  # noqa: E501
        'join_with': 'joinWith',  # noqa: E501
        'kurtosis': 'kurtosis',  # noqa: E501
        'last_processed_daily_value': 'lastProcessedDailyValue',  # noqa: E501
        'last_successful_update_time': 'lastSuccessfulUpdateTime',  # noqa: E501
        'last_value': 'lastValue',  # noqa: E501
        'latest_filling_time': 'latestFillingTime',  # noqa: E501
        'latest_measurement_time': 'latestMeasurementTime',  # noqa: E501
        'latest_source_time': 'latestSourceTime',  # noqa: E501
        'latest_user_measurement_time': 'latestUserMeasurementTime',  # noqa: E501
        'latitude': 'latitude',  # noqa: E501
        'location': 'location',  # noqa: E501
        'longitude': 'longitude',  # noqa: E501
        'manual_tracking': 'manualTracking',  # noqa: E501
        'maximum_allowed_daily_value': 'maximumAllowedDailyValue',  # noqa: E501
        'maximum_allowed_value': 'maximumAllowedValue',  # noqa: E501
        'maximum_recorded_daily_value': 'maximumRecordedDailyValue',  # noqa: E501
        'maximum_recorded_value': 'maximumRecordedValue',  # noqa: E501
        'mean': 'mean',  # noqa: E501
        'measurements_at_last_analysis': 'measurementsAtLastAnalysis',  # noqa: E501
        'median': 'median',  # noqa: E501
        'minimum_allowed_value': 'minimumAllowedValue',  # noqa: E501
        'minimum_allowed_daily_value': 'minimumAllowedDailyValue',  # noqa: E501
        'minimum_non_zero_value': 'minimumNonZeroValue',  # noqa: E501
        'minimum_recorded_value': 'minimumRecordedValue',  # noqa: E501
        'most_common_connector_id': 'mostCommonConnectorId',  # noqa: E501
        'most_common_original_unit_id': 'mostCommonOriginalUnitId',  # noqa: E501
        'most_common_unit_id': 'mostCommonUnitId',  # noqa: E501
        'most_common_value': 'mostCommonValue',  # noqa: E501
        'number_of_aggregate_correlations_as_cause': 'numberOfAggregateCorrelationsAsCause',  # noqa: E501
        'number_of_aggregate_correlations_as_effect': 'numberOfAggregateCorrelationsAsEffect',  # noqa: E501
        'number_of_changes': 'numberOfChanges',  # noqa: E501
        'number_of_correlations': 'numberOfCorrelations',  # noqa: E501
        'number_of_correlations_as_cause': 'numberOfCorrelationsAsCause',  # noqa: E501
        'number_of_correlations_as_effect': 'numberOfCorrelationsAsEffect',  # noqa: E501
        'number_of_processed_daily_measurements': 'numberOfProcessedDailyMeasurements',  # noqa: E501
        'number_of_raw_measurements': 'numberOfRawMeasurements',  # noqa: E501
        'number_of_tracking_reminders': 'numberOfTrackingReminders',  # noqa: E501
        'number_of_unique_daily_values': 'numberOfUniqueDailyValues',  # noqa: E501
        'number_of_unique_values': 'numberOfUniqueValues',  # noqa: E501
        'number_of_user_correlations_as_cause': 'numberOfUserCorrelationsAsCause',  # noqa: E501
        'number_of_user_correlations_as_effect': 'numberOfUserCorrelationsAsEffect',  # noqa: E501
        'number_of_user_variables': 'numberOfUserVariables',  # noqa: E501
        'onset_delay': 'onsetDelay',  # noqa: E501
        'onset_delay_in_hours': 'onsetDelayInHours',  # noqa: E501
        'outcome': 'outcome',  # noqa: E501
        'outcome_of_interest': 'outcomeOfInterest',  # noqa: E501
        'parent_common_tag_variables': 'parentCommonTagVariables',  # noqa: E501
        'parent_user_tag_variables': 'parentUserTagVariables',  # noqa: E501
        'png_path': 'pngPath',  # noqa: E501
        'png_url': 'pngUrl',  # noqa: E501
        'predictor_of_interest': 'predictorOfInterest',  # noqa: E501
        'price': 'price',  # noqa: E501
        'product_url': 'productUrl',  # noqa: E501
        'public': 'public',  # noqa: E501
        'question': 'question',  # noqa: E501
        'long_question': 'longQuestion',  # noqa: E501
        'raw_measurements_at_last_analysis': 'rawMeasurementsAtLastAnalysis',  # noqa: E501
        'second_most_common_value': 'secondMostCommonValue',  # noqa: E501
        'second_to_last_value': 'secondToLastValue',  # noqa: E501
        'share_user_measurements': 'shareUserMeasurements',  # noqa: E501
        'skewness': 'skewness',  # noqa: E501
        'standard_deviation': 'standardDeviation',  # noqa: E501
        'status': 'status',  # noqa: E501
        'subtitle': 'subtitle',  # noqa: E501
        'svg_url': 'svgUrl',  # noqa: E501
        'third_most_common_value': 'thirdMostCommonValue',  # noqa: E501
        'third_to_last_value': 'thirdToLastValue',  # noqa: E501
        'tracking_instructions': 'trackingInstructions',  # noqa: E501
        'tracking_instructions_card': 'trackingInstructionsCard',  # noqa: E501
        'unit': 'unit',  # noqa: E501
        'unit_abbreviated_name': 'unitAbbreviatedName',  # noqa: E501
        'unit_category_id': 'unitCategoryId',  # noqa: E501
        'unit_category_name': 'unitCategoryName',  # noqa: E501
        'unit_id': 'unitId',  # noqa: E501
        'unit_name': 'unitName',  # noqa: E501
        'upc': 'upc',  # noqa: E501
        'updated': 'updated',  # noqa: E501
        'updated_at': 'updatedAt',  # noqa: E501
        'updated_time': 'updatedTime',  # noqa: E501
        'user_tagged_variables': 'userTaggedVariables',  # noqa: E501
        'user_tag_variables': 'userTagVariables',  # noqa: E501
        'user_variable_unit_abbreviated_name': 'userVariableUnitAbbreviatedName',  # noqa: E501
        'user_variable_unit_category_id': 'userVariableUnitCategoryId',  # noqa: E501
        'user_variable_unit_category_name': 'userVariableUnitCategoryName',  # noqa: E501
        'user_variable_unit_id': 'userVariableUnitId',  # noqa: E501
        'user_variable_unit_name': 'userVariableUnitName',  # noqa: E501
        'variable_category': 'variableCategory',  # noqa: E501
        'joined_variables': 'joinedVariables',  # noqa: E501
        'valence': 'valence',  # noqa: E501
        'variable_category_id': 'variableCategoryId',  # noqa: E501
        'variable_category_name': 'variableCategoryName',  # noqa: E501
        'variable_name': 'variableName',  # noqa: E501
        'variance': 'variance',  # noqa: E501
        'wikipedia_title': 'wikipediaTitle',  # noqa: E501
    }

    _composed_schemas = {}

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, id, name, user_id, variable_id, *args, **kwargs):  # noqa: E501
        """Variable - a model defined in OpenAPI

        Args:
            id (int): Ex: 95614
            name (str): Ex: Trader Joes Bedtime Tea / Sleepytime Tea (any Brand)
            user_id (int): User ID
            variable_id (int): Ex: 96380

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            action_array ([TrackingReminderNotificationAction]): [optional]  # noqa: E501
            alias (str): User-Defined Variable Setting:  Alternative display name. [optional]  # noqa: E501
            available_units ([Unit]): [optional]  # noqa: E501
            best_study_link (str): Link to study comparing variable with strongest relationship for user or population. [optional]  # noqa: E501
            best_study_card (Card): [optional]  # noqa: E501
            best_user_study_link (str): Link to study comparing variable with strongest relationship for user. [optional]  # noqa: E501
            best_user_study_card (Card): [optional]  # noqa: E501
            best_population_study_link (str): Link to study comparing variable with strongest relationship for population. [optional]  # noqa: E501
            best_population_study_card (Card): [optional]  # noqa: E501
            optimal_value_message (str): Description of relationship with variable with strongest relationship for user or population. [optional]  # noqa: E501
            common_optimal_value_message (str): Description of relationship with variable with strongest relationship for population. [optional]  # noqa: E501
            user_optimal_value_message (str): Description of relationship with variable with strongest relationship for user. [optional]  # noqa: E501
            card (Card): [optional]  # noqa: E501
            cause_only (bool): User-Defined Variable Setting: True indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user. [optional]  # noqa: E501
            charts (VariableCharts): [optional]  # noqa: E501
            charts_link_dynamic (str): Ex: https://local.quantimo.do/ionic/Modo/www/#/app/charts/Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29?variableName=Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29&userId=230&pngUrl=https%3A%2F%2Fapp.quantimo.do%2Fionic%2FModo%2Fwww%2Fimg%2Fvariable_categories%2Ftreatments.png. [optional]  # noqa: E501
            charts_link_email (str): Ex: mailto:?subject=Check%20out%20my%20Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29%20data%21&body=See%20my%20Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29%20history%20at%20https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fcharts%3FvariableName%3DTrader%2520Joes%2520Bedtime%2520Tea%2520%252F%2520Sleepytime%2520Tea%2520%2528any%2520Brand%2529%26userId%3D230%26pngUrl%3Dhttps%253A%252F%252Fapp.quantimo.do%252Fionic%252FModo%252Fwww%252Fimg%252Fvariable_categories%252Ftreatments.png%0A%0AHave%20a%20great%20day!. [optional]  # noqa: E501
            charts_link_facebook (str): Ex: https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fcharts%3FvariableName%3DTrader%2520Joes%2520Bedtime%2520Tea%2520%252F%2520Sleepytime%2520Tea%2520%2528any%2520Brand%2529%26userId%3D230%26pngUrl%3Dhttps%253A%252F%252Fapp.quantimo.do%252Fionic%252FModo%252Fwww%252Fimg%252Fvariable_categories%252Ftreatments.png. [optional]  # noqa: E501
            charts_link_google (str): Ex: https://plus.google.com/share?url=https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fcharts%3FvariableName%3DTrader%2520Joes%2520Bedtime%2520Tea%2520%252F%2520Sleepytime%2520Tea%2520%2528any%2520Brand%2529%26userId%3D230%26pngUrl%3Dhttps%253A%252F%252Fapp.quantimo.do%252Fionic%252FModo%252Fwww%252Fimg%252Fvariable_categories%252Ftreatments.png. [optional]  # noqa: E501
            charts_link_static (str): Ex: https://local.quantimo.do/api/v2/charts?variableName=Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29&userId=230&pngUrl=https%3A%2F%2Fapp.quantimo.do%2Fionic%2FModo%2Fwww%2Fimg%2Fvariable_categories%2Ftreatments.png. [optional]  # noqa: E501
            charts_link_twitter (str): Ex: https://twitter.com/home?status=Check%20out%20my%20Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29%20data%21%20https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fcharts%3FvariableName%3DTrader%2520Joes%2520Bedtime%2520Tea%2520%252F%2520Sleepytime%2520Tea%2520%2528any%2520Brand%2529%26userId%3D230%26pngUrl%3Dhttps%253A%252F%252Fapp.quantimo.do%252Fionic%252FModo%252Fwww%252Fimg%252Fvariable_categories%252Ftreatments.png%20%40curedao. [optional]  # noqa: E501
            child_common_tag_variables ([Variable]): Commonly defined for all users. An example of a parent category variable would be Fruit when tagged with the child sub-type variables Apple.  Child variable (Apple) measurements will be included when the parent category (Fruit) is analyzed.  This allows us to see how Fruit consumption might be affecting without having to record both Fruit and Apple intake.. [optional]  # noqa: E501
            child_user_tag_variables ([Variable]): User-Defined Variable Setting: An example of a parent category variable would be Fruit when tagged with the child sub-type variables Apple.  Child variable (Apple) measurements will be included when the parent category (Fruit) is analyzed.  This allows us to see how Fruit consumption might be affecting without having to record both Fruit and Apple intake.. [optional]  # noqa: E501
            client_id (str): Your CureDAO client id can be obtained by creating an app at https://builder.quantimo.do. [optional]  # noqa: E501
            combination_operation (str): User-Defined Variable Setting: How to aggregate measurements over time. SUM should be used for things like minutes of exercise.  If you use MEAN for exercise, then a person might exercise more minutes in one day but add separate measurements that were smaller.  So when we are doing correlational analysis, we would think that the person exercised less that day even though they exercised more.  Conversely, we must use MEAN for things such as ratings which cannot be SUMMED.. [optional]  # noqa: E501
            common_alias (str): Ex: Anxiety / Nervousness. [optional]  # noqa: E501
            common_tagged_variables ([Variable]): [optional]  # noqa: E501
            common_tag_variables ([Variable]): [optional]  # noqa: E501
            created_at (str): When the record was first created. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss  datetime format. [optional]  # noqa: E501
            data_source_names (str): Comma-separated list of source names to limit variables to those sources. [optional]  # noqa: E501
            data_sources ([DataSource]): These are sources of measurements for this variable. [optional]  # noqa: E501
            description (str): User-Defined Variable Setting: Ex: Summary to be used in studies.. [optional]  # noqa: E501
            display_name (str): Ex: Trader Joe's Bedtime Tea. [optional]  # noqa: E501
            duration_of_action (int): The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay. Unit: Seconds. [optional]  # noqa: E501
            duration_of_action_in_hours (float): User-Defined Variable Setting: The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.  Unit: Hours. [optional]  # noqa: E501
            earliest_filling_time (int): Earliest filling time. [optional]  # noqa: E501
            earliest_measurement_time (int): Earliest measurement time. [optional]  # noqa: E501
            earliest_source_time (int): Earliest source time. [optional]  # noqa: E501
            error_message (str): Error message from last analysis. [optional]  # noqa: E501
            experiment_end_time (str): User-Defined Variable Setting: Latest measurement time to be used in analysis. Format: UTC ISO 8601 YYYY-MM-DDThh:mm:ss.. [optional]  # noqa: E501
            experiment_start_time (str): User-Defined Variable Setting: Earliest measurement time to be used in analysis. Format: UTC ISO 8601 YYYY-MM-DDThh:mm:ss.. [optional]  # noqa: E501
            filling_type (str): User-Defined Variable Setting: When it comes to analysis to determine the effects of this variable, knowing when it did not occur is as important as knowing when it did occur. For example, if you are tracking a medication, it is important to know when you did not take it, but you do not have to log zero values for all the days when you haven't taken it. Hence, you can specify a filling value (typically 0) to insert whenever data is missing.. [optional]  # noqa: E501
            filling_value (float): User-Defined Variable Setting: When it comes to analysis to determine the effects of this variable, knowing when it did not occur is as important as knowing when it did occur. For example, if you are tracking a medication, it is important to know when you did not take it, but you do not have to log zero values for all the days when you haven't taken it. Hence, you can specify a filling value (typically 0) to insert whenever data is missing.  Unit: User-specified or common.. [optional]  # noqa: E501
            icon_icon (str): Ex: ion-sad-outline. [optional]  # noqa: E501
            image_url (str): [optional]  # noqa: E501
            informational_url (str): Ex: https://google.com. [optional]  # noqa: E501
            ingredient_of_common_tag_variables ([Variable]): Commonly defined for all users. IngredientOf variable measurements will be included in analysis of the ingredient variable.  For instance, a ingredient of the variable Lollipop could be Sugar.  This way you only have to record Lollipop consumption and we can use this data to see how sugar might be affecting you.. [optional]  # noqa: E501
            ingredient_common_tag_variables ([Variable]): Commonly defined for all users. IngredientOf variable measurements will be included in analysis of the ingredient variable.  For instance, a ingredient of the variable Lollipop could be Sugar.  This way you only have to record Lollipop consumption and we can use this data to see how sugar might be affecting you.. [optional]  # noqa: E501
            ingredient_of_user_tag_variables ([Variable]): User-Defined Variable Setting: IngredientOf variable measurements will be included in analysis of the ingredient variable.  For instance, a ingredient of the variable Lollipop could be Sugar.  This way you only have to record Lollipop consumption and we can use this data to see how sugar might be affecting you.. [optional]  # noqa: E501
            ingredient_user_tag_variables ([Variable]): User-Defined Variable Setting: IngredientOf variable measurements will be included in analysis of the ingredient variable.  For instance, a ingredient of the variable Lollipop could be Sugar.  This way you only have to record Lollipop consumption and we can use this data to see how sugar might be affecting you.. [optional]  # noqa: E501
            input_type (str): Type of input field to show for recording measurements. [optional]  # noqa: E501
            ion_icon (str): [optional]  # noqa: E501
            joined_common_tag_variables ([Variable]): Commonly defined for all users.  Joining can be used used to merge duplicate variables. For instance, if two variables called Apples (Red Delicious) and Red Delicious Apples are joined, when one of them is analyzed, the measurements for the other will be included as well.. [optional]  # noqa: E501
            joined_user_tag_variables ([Variable]): User-Defined Variable Setting: Joining can be used used to merge duplicate variables. For instance, if two variables called Apples (Red Delicious) and Red Delicious Apples are joined, when one of them is analyzed, the measurements for the other will be included as well.. [optional]  # noqa: E501
            join_with (int): Duplicate variables. If the variable is joined with some other variable then it is not shown to user in the list of variables. [optional]  # noqa: E501
            kurtosis (float): Kurtosis. [optional]  # noqa: E501
            last_processed_daily_value (float): Calculated Statistic: Ex: 500. Unit: User-specified or common.. [optional]  # noqa: E501
            last_successful_update_time (str): When this variable or its settings were last updated UTC ISO 8601 YYYY-MM-DDThh:mm:ss. [optional]  # noqa: E501
            last_value (float): Calculated Statistic: Last measurement value in the common unit or user unit if different. Unit: User-specified or common.. [optional]  # noqa: E501
            latest_filling_time (int): Latest filling time. [optional]  # noqa: E501
            latest_measurement_time (int): Latest measurement time. Format: Unix-time epoch seconds.. [optional]  # noqa: E501
            latest_source_time (int): Latest source time. Format: Unix-time epoch seconds.. [optional]  # noqa: E501
            latest_user_measurement_time (int): Ex: 1501383600. Format: Unix-time epoch seconds.. [optional]  # noqa: E501
            latitude (float): Latitude. Unit: User-specified or common.. [optional]  # noqa: E501
            location (str): Location. [optional]  # noqa: E501
            longitude (float): Longitude. [optional]  # noqa: E501
            manual_tracking (bool): True if the variable is an emotion or symptom rating that is not typically automatically collected by a device or app.. [optional]  # noqa: E501
            maximum_allowed_daily_value (float): User-Defined Variable Setting: The maximum allowed value a daily aggregated measurement. Unit: User-specified or common.. [optional]  # noqa: E501
            maximum_allowed_value (float): User-Defined Variable Setting: The maximum allowed value a single measurement. While you can record a value above this maximum, it will be excluded from the correlation analysis.  Unit: User-specified or common.. [optional]  # noqa: E501
            maximum_recorded_daily_value (float): Calculated Statistic: Maximum recorded daily value of this variable. Unit: User-specified or common.. [optional]  # noqa: E501
            maximum_recorded_value (float): Calculated Statistic: Ex: 1. Unit: User-specified or common.. [optional]  # noqa: E501
            mean (float): Mean. Unit: User-specified or common.. [optional]  # noqa: E501
            measurements_at_last_analysis (int): Number of measurements at last analysis. [optional]  # noqa: E501
            median (float): Median. [optional]  # noqa: E501
            minimum_allowed_value (float): User-Defined Variable Setting: The minimum allowed value a single measurement. While you can record a value below this minimum, it will be excluded from the correlation analysis. Unit: User-specified or common. [optional]  # noqa: E501
            minimum_allowed_daily_value (float): User-Defined Variable Setting: The minimum allowed value a daily aggregated measurement.  For instance, you might set to 100 for steps to keep erroneous 0 daily steps out of the analysis. Unit: User-specified or common.. [optional]  # noqa: E501
            minimum_non_zero_value (float): User-Defined Variable Setting: The minimum allowed non-zero value a single measurement.  For instance, you might set to 100 mL for steps to keep erroneous 0 daily steps out of the analysis. Unit: User-specified or common.. [optional]  # noqa: E501
            minimum_recorded_value (float): Minimum recorded value of this variable. Unit: User-specified or common.. [optional]  # noqa: E501
            most_common_connector_id (int): Ex: 51. [optional]  # noqa: E501
            most_common_original_unit_id (int): Ex: 23. [optional]  # noqa: E501
            most_common_unit_id (int): Most common Unit ID. [optional]  # noqa: E501
            most_common_value (float): Calculated Statistic: Most common value. Unit: User-specified or common.. [optional]  # noqa: E501
            number_of_aggregate_correlations_as_cause (int): Ex: 1. [optional]  # noqa: E501
            number_of_aggregate_correlations_as_effect (int): Ex: 310. [optional]  # noqa: E501
            number_of_changes (int): Number of changes. [optional]  # noqa: E501
            number_of_correlations (int): Number of correlations for this variable. [optional]  # noqa: E501
            number_of_correlations_as_cause (int): numberOfAggregateCorrelationsAsCause plus numberOfUserCorrelationsAsCause. [optional]  # noqa: E501
            number_of_correlations_as_effect (int): numberOfAggregateCorrelationsAsEffect plus numberOfUserCorrelationsAsEffect. [optional]  # noqa: E501
            number_of_processed_daily_measurements (int): Number of processed measurements. [optional]  # noqa: E501
            number_of_raw_measurements (int): Ex: 295. [optional]  # noqa: E501
            number_of_tracking_reminders (int): Ex: 1. [optional]  # noqa: E501
            number_of_unique_daily_values (float): Number of unique daily values. [optional]  # noqa: E501
            number_of_unique_values (int): Ex: 2. [optional]  # noqa: E501
            number_of_user_correlations_as_cause (int): Ex: 115. [optional]  # noqa: E501
            number_of_user_correlations_as_effect (int): Ex: 29014. [optional]  # noqa: E501
            number_of_user_variables (int): Ex: 2. [optional]  # noqa: E501
            onset_delay (int): The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the onset delay. For example, the onset delay between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.. [optional]  # noqa: E501
            onset_delay_in_hours (float): User-Defined Variable Setting: The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the onset delay. For example, the onset delay between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.. [optional]  # noqa: E501
            outcome (bool): User-Defined Variable Setting: True for variables for which a human would generally want to identify the influencing factors. These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables. [optional]  # noqa: E501
            outcome_of_interest (bool): Do you want to receive updates on newly discovered factors influencing this variable?. [optional]  # noqa: E501
            parent_common_tag_variables ([Variable]): Commonly defined for all users.  An example of a parent category variable would be Fruit when tagged with the child sub-type variables Apple.  Child variable (Apple) measurements will be included when the parent category (Fruit) is analyzed.  This allows us to see how Fruit consumption might be affecting without having to record both Fruit and Apple intake.. [optional]  # noqa: E501
            parent_user_tag_variables ([Variable]): User-defined. An example of a parent category variable would be Fruit when tagged with the child sub-type variables Apple.  Child variable (Apple) measurements will be included when the parent category (Fruit) is analyzed.  This allows us to see how Fruit consumption might be affecting without having to record both Fruit and Apple intake.. [optional]  # noqa: E501
            png_path (str): Ex: img/variable_categories/treatments.png. [optional]  # noqa: E501
            png_url (str): Ex: https://app.curedao.org/img/variable_categories/treatments.png. [optional]  # noqa: E501
            predictor_of_interest (int): Ex: 0. [optional]  # noqa: E501
            price (float): Ex: 95.4. [optional]  # noqa: E501
            product_url (str): Link to associated product for purchase. [optional]  # noqa: E501
            public (bool): Should this variable show up in automcomplete searches for users who do not already have measurements for it?. [optional]  # noqa: E501
            question (str): Ex: How is your overall mood?. [optional]  # noqa: E501
            long_question (str): Ex: How is your overall mood on a scale of 1 to 5??. [optional]  # noqa: E501
            raw_measurements_at_last_analysis (int): Ex: 131. [optional]  # noqa: E501
            second_most_common_value (float): Calculated Statistic: Ex: 1. Unit: User-specified or common.. [optional]  # noqa: E501
            second_to_last_value (float): Calculated Statistic: Ex: 250. Unit: User-specified or common.. [optional]  # noqa: E501
            share_user_measurements (bool): Would you like to make your measurements publicly visible?. [optional]  # noqa: E501
            skewness (float): Skewness. [optional]  # noqa: E501
            standard_deviation (float): Standard deviation Ex: 0.46483219855434. [optional]  # noqa: E501
            status (str): status. [optional]  # noqa: E501
            subtitle (str): Based on sort filter and can be shown beneath variable name on search list. [optional]  # noqa: E501
            svg_url (str): Ex: https://app.curedao.org/img/variable_categories/treatments.svg. [optional]  # noqa: E501
            third_most_common_value (float): Calculated Statistic: Ex: 6. Unit: User-specified or common.. [optional]  # noqa: E501
            third_to_last_value (float): Calculated Statistic: Ex: 250. Unit: User-specified or common.. [optional]  # noqa: E501
            tracking_instructions (str): HTML instructions for tracking. [optional]  # noqa: E501
            tracking_instructions_card (Card): [optional]  # noqa: E501
            unit (Unit): [optional]  # noqa: E501
            unit_abbreviated_name (str): Ex: count. [optional]  # noqa: E501
            unit_category_id (int): Ex: 6. [optional]  # noqa: E501
            unit_category_name (str): Ex: Miscellany. [optional]  # noqa: E501
            unit_id (int): ID of unit to use for this variable. [optional]  # noqa: E501
            unit_name (str): User-Defined Variable Setting: Count. [optional]  # noqa: E501
            upc (str): Universal product code or similar. [optional]  # noqa: E501
            updated (int): updated. [optional]  # noqa: E501
            updated_at (str): When the record in the database was last updated. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format. [optional]  # noqa: E501
            updated_time (str): Ex: 2017-07-30 14:58:26. [optional]  # noqa: E501
            user_tagged_variables ([Variable]): [optional]  # noqa: E501
            user_tag_variables ([Variable]): [optional]  # noqa: E501
            user_variable_unit_abbreviated_name (str): Ex: count. [optional]  # noqa: E501
            user_variable_unit_category_id (int): Ex: 6. [optional]  # noqa: E501
            user_variable_unit_category_name (str): Ex: Miscellany. [optional]  # noqa: E501
            user_variable_unit_id (int): Ex: 23. [optional]  # noqa: E501
            user_variable_unit_name (str): Ex: Count. [optional]  # noqa: E501
            variable_category (VariableCategory): [optional]  # noqa: E501
            joined_variables ([Variable]): Array of Variables that are joined with this Variable. [optional]  # noqa: E501
            valence (str): Valence indicates what type of buttons should be used when recording measurements for this variable. positive - Face buttons with the happiest face equating to a 5/5 rating where higher is better like Overall Mood. negative - Face buttons with happiest face equating to a 1/5 rating where lower is better like Headache Severity. numeric - Just 1 to 5 numeric buttons for neutral variables. . [optional]  # noqa: E501
            variable_category_id (int): Ex: 6. [optional]  # noqa: E501
            variable_category_name (str): User-Defined Variable Setting: Variable category like Emotions, Sleep, Physical Activities, Treatments, Symptoms, etc.. [optional]  # noqa: E501
            variable_name (str): Ex: Sleep Duration. [optional]  # noqa: E501
            variance (float): Statistic: Ex: 115947037.40816. [optional]  # noqa: E501
            wikipedia_title (str): User-Defined Variable Setting: You can help to improve the studies by pasting the title of the most appropriate Wikipedia article for this variable. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.id = id
        self.name = name
        self.user_id = user_id
        self.variable_id = variable_id
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
