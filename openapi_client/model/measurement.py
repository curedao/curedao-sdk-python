"""
    CureDAO Unified Health API

    A platform for participant-centered research and personal data exploration  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

import nulltype  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)

def lazy_import():
    from openapi_client.model.card import Card
    globals()['Card'] = Card


class Measurement(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('variable_category_name',): {
            'ACTIVITY': "Activity",
            'BOOKS': "Books",
            'CAUSES_OF_ILLNESS': "Causes of Illness",
            'COGNITIVE_PERFORMANCE': "Cognitive Performance",
            'CONDITIONS': "Conditions",
            'EMOTIONS': "Emotions",
            'ENVIRONMENT': "Environment",
            'FOODS': "Foods",
            'GOALS': "Goals",
            'LOCATIONS': "Locations",
            'MISCELLANEOUS': "Miscellaneous",
            'MOVIES_AND_TV': "Movies and TV",
            'MUSIC': "Music",
            'NUTRIENTS': "Nutrients",
            'PAYMENTS': "Payments",
            'PHYSICAL_ACTIVITIES': "Physical Activities",
            'PHYSIQUE': "Physique",
            'SLEEP': "Sleep",
            'SOCIAL_INTERACTIONS': "Social Interactions",
            'SOFTWARE': "Software",
            'SYMPTOMS': "Symptoms",
            'TREATMENTS': "Treatments",
            'VITAL_SIGNS': "Vital Signs",
        },
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'source_name': (str,),  # noqa: E501
            'start_time_string': (str,),  # noqa: E501
            'unit_abbreviated_name': (str,),  # noqa: E501
            'value': (float,),  # noqa: E501
            'variable_name': (str,),  # noqa: E501
            'card': (Card,),  # noqa: E501
            'client_id': (str,),  # noqa: E501
            'connector_id': (int,),  # noqa: E501
            'created_at': (str,),  # noqa: E501
            'display_value_and_unit_string': (str,),  # noqa: E501
            'icon_icon': (str,),  # noqa: E501
            'id': (int,),  # noqa: E501
            'input_type': (str,),  # noqa: E501
            'ion_icon': (str,),  # noqa: E501
            'manual_tracking': (bool,),  # noqa: E501
            'maximum_allowed_value': (float,),  # noqa: E501
            'minimum_allowed_value': (float,),  # noqa: E501
            'note': (str,),  # noqa: E501
            'note_object': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'note_html': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'original_unit_id': (int,),  # noqa: E501
            'original_value': (float,),  # noqa: E501
            'png_path': (str,),  # noqa: E501
            'png_url': (str,),  # noqa: E501
            'product_url': (str,),  # noqa: E501
            'start_date': (str,),  # noqa: E501
            'start_time_epoch': (int,),  # noqa: E501
            'svg_url': (str,),  # noqa: E501
            'unit_category_id': (int,),  # noqa: E501
            'unit_category_name': (str,),  # noqa: E501
            'unit_id': (int,),  # noqa: E501
            'unit_name': (str,),  # noqa: E501
            'updated_at': (str,),  # noqa: E501
            'url': (str,),  # noqa: E501
            'user_variable_unit_abbreviated_name': (str,),  # noqa: E501
            'user_variable_unit_category_id': (int,),  # noqa: E501
            'user_variable_unit_category_name': (str,),  # noqa: E501
            'user_variable_unit_id': (int,),  # noqa: E501
            'user_variable_unit_name': (str,),  # noqa: E501
            'user_variable_variable_category_id': (int,),  # noqa: E501
            'user_variable_variable_category_name': (str,),  # noqa: E501
            'valence': (str,),  # noqa: E501
            'variable_category_id': (int,),  # noqa: E501
            'variable_category_image_url': (str,),  # noqa: E501
            'variable_category_name': (str,),  # noqa: E501
            'variable_description': (str,),  # noqa: E501
            'variable_id': (int,),  # noqa: E501
            'display_name': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'source_name': 'sourceName',  # noqa: E501
        'start_time_string': 'startTimeString',  # noqa: E501
        'unit_abbreviated_name': 'unitAbbreviatedName',  # noqa: E501
        'value': 'value',  # noqa: E501
        'variable_name': 'variableName',  # noqa: E501
        'card': 'card',  # noqa: E501
        'client_id': 'clientId',  # noqa: E501
        'connector_id': 'connectorId',  # noqa: E501
        'created_at': 'createdAt',  # noqa: E501
        'display_value_and_unit_string': 'displayValueAndUnitString',  # noqa: E501
        'icon_icon': 'iconIcon',  # noqa: E501
        'id': 'id',  # noqa: E501
        'input_type': 'inputType',  # noqa: E501
        'ion_icon': 'ionIcon',  # noqa: E501
        'manual_tracking': 'manualTracking',  # noqa: E501
        'maximum_allowed_value': 'maximumAllowedValue',  # noqa: E501
        'minimum_allowed_value': 'minimumAllowedValue',  # noqa: E501
        'note': 'note',  # noqa: E501
        'note_object': 'noteObject',  # noqa: E501
        'note_html': 'noteHtml',  # noqa: E501
        'original_unit_id': 'originalUnitId',  # noqa: E501
        'original_value': 'originalValue',  # noqa: E501
        'png_path': 'pngPath',  # noqa: E501
        'png_url': 'pngUrl',  # noqa: E501
        'product_url': 'productUrl',  # noqa: E501
        'start_date': 'startDate',  # noqa: E501
        'start_time_epoch': 'startTimeEpoch',  # noqa: E501
        'svg_url': 'svgUrl',  # noqa: E501
        'unit_category_id': 'unitCategoryId',  # noqa: E501
        'unit_category_name': 'unitCategoryName',  # noqa: E501
        'unit_id': 'unitId',  # noqa: E501
        'unit_name': 'unitName',  # noqa: E501
        'updated_at': 'updatedAt',  # noqa: E501
        'url': 'url',  # noqa: E501
        'user_variable_unit_abbreviated_name': 'userVariableUnitAbbreviatedName',  # noqa: E501
        'user_variable_unit_category_id': 'userVariableUnitCategoryId',  # noqa: E501
        'user_variable_unit_category_name': 'userVariableUnitCategoryName',  # noqa: E501
        'user_variable_unit_id': 'userVariableUnitId',  # noqa: E501
        'user_variable_unit_name': 'userVariableUnitName',  # noqa: E501
        'user_variable_variable_category_id': 'userVariableVariableCategoryId',  # noqa: E501
        'user_variable_variable_category_name': 'userVariableVariableCategoryName',  # noqa: E501
        'valence': 'valence',  # noqa: E501
        'variable_category_id': 'variableCategoryId',  # noqa: E501
        'variable_category_image_url': 'variableCategoryImageUrl',  # noqa: E501
        'variable_category_name': 'variableCategoryName',  # noqa: E501
        'variable_description': 'variableDescription',  # noqa: E501
        'variable_id': 'variableId',  # noqa: E501
        'display_name': 'displayName',  # noqa: E501
    }

    _composed_schemas = {}

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, source_name, start_time_string, unit_abbreviated_name, value, variable_name, *args, **kwargs):  # noqa: E501
        """Measurement - a model defined in OpenAPI

        Args:
            source_name (str): Application or device used to record the measurement values
            start_time_string (str): Start Time for the measurement event in UTC ISO 8601 YYYY-MM-DDThh:mm:ss
            unit_abbreviated_name (str): Abbreviated name for the unit of measurement
            value (float): Converted measurement value in requested unit
            variable_name (str): Name of the variable for which we are creating the measurement records

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            card (Card): [optional]  # noqa: E501
            client_id (str): Ex: curedao. [optional]  # noqa: E501
            connector_id (int): Ex: 13. [optional]  # noqa: E501
            created_at (str): Ex: 2017-07-30 21:08:36. [optional]  # noqa: E501
            display_value_and_unit_string (str): Examples: 3/5, $10, or 1 count. [optional]  # noqa: E501
            icon_icon (str): Ex: ion-sad-outline. [optional]  # noqa: E501
            id (int): Ex: 1051466127. [optional]  # noqa: E501
            input_type (str): Ex: value. [optional]  # noqa: E501
            ion_icon (str): Ex: ion-ios-medkit-outline. [optional]  # noqa: E501
            manual_tracking (bool): Ex: 1. [optional]  # noqa: E501
            maximum_allowed_value (float): Ex: 5. Unit: User-specified or common.. [optional]  # noqa: E501
            minimum_allowed_value (float): Ex: 1. Unit: User-specified or common.. [optional]  # noqa: E501
            note (str): Note of measurement. [optional]  # noqa: E501
            note_object ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Additional meta data for the measurement. [optional]  # noqa: E501
            note_html ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Embeddable HTML with message hyperlinked with associated url. [optional]  # noqa: E501
            original_unit_id (int): Ex: 23. [optional]  # noqa: E501
            original_value (float): Original value submitted. Unit: Originally submitted.. [optional]  # noqa: E501
            png_path (str): Ex: img/variable_categories/treatments.png. [optional]  # noqa: E501
            png_url (str): Ex: https://app.curedao.org/img/variable_categories/treatments.png. [optional]  # noqa: E501
            product_url (str): Link to associated product for purchase. [optional]  # noqa: E501
            start_date (str): Ex: 2014-08-27. [optional]  # noqa: E501
            start_time_epoch (int): Seconds between the start of the event measured and 1970 (Unix timestamp). [optional]  # noqa: E501
            svg_url (str): Ex: https://app.curedao.org/img/variable_categories/treatments.svg. [optional]  # noqa: E501
            unit_category_id (int): Ex: 6. [optional]  # noqa: E501
            unit_category_name (str): Ex: Miscellany. [optional]  # noqa: E501
            unit_id (int): Ex: 23. [optional]  # noqa: E501
            unit_name (str): Ex: Count. [optional]  # noqa: E501
            updated_at (str): Ex: 2017-07-30 21:08:36. [optional]  # noqa: E501
            url (str): Link to associated Facebook like or Github commit, for instance. [optional]  # noqa: E501
            user_variable_unit_abbreviated_name (str): Ex: count. [optional]  # noqa: E501
            user_variable_unit_category_id (int): Ex: 6. [optional]  # noqa: E501
            user_variable_unit_category_name (str): Ex: Miscellany. [optional]  # noqa: E501
            user_variable_unit_id (int): Ex: 23. [optional]  # noqa: E501
            user_variable_unit_name (str): Ex: Count. [optional]  # noqa: E501
            user_variable_variable_category_id (int): Ex: 13. [optional]  # noqa: E501
            user_variable_variable_category_name (str): Ex: Treatments. [optional]  # noqa: E501
            valence (str): Valence indicates what type of buttons should be used when recording measurements for this variable. positive - Face buttons with the happiest face equating to a 5/5 rating where higher is better like Overall Mood. negative - Face buttons with happiest face equating to a 1/5 rating where lower is better like Headache Severity. numeric - Just 1 to 5 numeric buttons for neutral variables. . [optional]  # noqa: E501
            variable_category_id (int): Ex: 13. [optional]  # noqa: E501
            variable_category_image_url (str): Ex: https://static.quantimo.do/img/variable_categories/pill-96.png. [optional]  # noqa: E501
            variable_category_name (str): Ex: Emotions, Treatments, Symptoms.... [optional]  # noqa: E501
            variable_description (str): Valence indicates what type of buttons should be used when recording measurements for this variable. positive - Face buttons with the happiest face equating to a 5/5 rating where higher is better like Overall Mood. negative - Face buttons with happiest face equating to a 1/5 rating where lower is better like Headache Severity. numeric - Just 1 to 5 numeric buttons for neutral variables. . [optional]  # noqa: E501
            variable_id (int): Ex: 5956846. [optional]  # noqa: E501
            display_name (str): Ex: Trader Joe's Bedtime Tea. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.source_name = source_name
        self.start_time_string = start_time_string
        self.unit_abbreviated_name = unit_abbreviated_name
        self.value = value
        self.variable_name = variable_name
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
