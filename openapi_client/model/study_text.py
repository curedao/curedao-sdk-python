"""
    CureDAO Unified Health API

    A platform for participant-centered research and personal data exploration  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

import nulltype  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)


class StudyText(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'study_abstract': (str,),  # noqa: E501
            'study_design': (str,),  # noqa: E501
            'study_limitations': (str,),  # noqa: E501
            'study_objective': (str,),  # noqa: E501
            'study_results': (str,),  # noqa: E501
            'study_title': (str,),  # noqa: E501
            'average_effect_following_high_cause_explanation': (str,),  # noqa: E501
            'average_effect_following_low_cause_explanation': (str,),  # noqa: E501
            'value_predicting_high_outcome_explanation': (str,),  # noqa: E501
            'value_predicting_low_outcome_explanation': (str,),  # noqa: E501
            'data_analysis': (str,),  # noqa: E501
            'data_sources': (str,),  # noqa: E501
            'data_sources_paragraph_for_cause': (str,),  # noqa: E501
            'data_sources_paragraph_for_effect': (str,),  # noqa: E501
            'last_cause_daily_value_sentence_extended': (str,),  # noqa: E501
            'last_cause_and_optimal_value_sentence': (str,),  # noqa: E501
            'last_cause_daily_value_sentence': (str,),  # noqa: E501
            'optimal_daily_value_sentence': (str,),  # noqa: E501
            'participant_instructions': (str,),  # noqa: E501
            'predictor_explanation': (str,),  # noqa: E501
            'significance_explanation': (str,),  # noqa: E501
            'study_invitation': (str,),  # noqa: E501
            'study_question': (str,),  # noqa: E501
            'study_background': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'study_abstract': 'studyAbstract',  # noqa: E501
        'study_design': 'studyDesign',  # noqa: E501
        'study_limitations': 'studyLimitations',  # noqa: E501
        'study_objective': 'studyObjective',  # noqa: E501
        'study_results': 'studyResults',  # noqa: E501
        'study_title': 'studyTitle',  # noqa: E501
        'average_effect_following_high_cause_explanation': 'averageEffectFollowingHighCauseExplanation',  # noqa: E501
        'average_effect_following_low_cause_explanation': 'averageEffectFollowingLowCauseExplanation',  # noqa: E501
        'value_predicting_high_outcome_explanation': 'valuePredictingHighOutcomeExplanation',  # noqa: E501
        'value_predicting_low_outcome_explanation': 'valuePredictingLowOutcomeExplanation',  # noqa: E501
        'data_analysis': 'dataAnalysis',  # noqa: E501
        'data_sources': 'dataSources',  # noqa: E501
        'data_sources_paragraph_for_cause': 'dataSourcesParagraphForCause',  # noqa: E501
        'data_sources_paragraph_for_effect': 'dataSourcesParagraphForEffect',  # noqa: E501
        'last_cause_daily_value_sentence_extended': 'lastCauseDailyValueSentenceExtended',  # noqa: E501
        'last_cause_and_optimal_value_sentence': 'lastCauseAndOptimalValueSentence',  # noqa: E501
        'last_cause_daily_value_sentence': 'lastCauseDailyValueSentence',  # noqa: E501
        'optimal_daily_value_sentence': 'optimalDailyValueSentence',  # noqa: E501
        'participant_instructions': 'participantInstructions',  # noqa: E501
        'predictor_explanation': 'predictorExplanation',  # noqa: E501
        'significance_explanation': 'significanceExplanation',  # noqa: E501
        'study_invitation': 'studyInvitation',  # noqa: E501
        'study_question': 'studyQuestion',  # noqa: E501
        'study_background': 'studyBackground',  # noqa: E501
    }

    _composed_schemas = {}

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, study_abstract, study_design, study_limitations, study_objective, study_results, study_title, *args, **kwargs):  # noqa: E501
        """StudyText - a model defined in OpenAPI

        Args:
            study_abstract (str): Ex: Aggregated data from 21 suggests with a low degree of confidence (p=0.097) that Very Distracting Time has a moderately positive predictive relationship (R=0.354) with Video Activities  (Activity).  The highest quartile of Video Activities measurements were observed following an average 2.03h Very Distracting Timeper day.  The lowest quartile of Video Activities  measurements were observed following an average 1.04h Very Distracting Timeper day.
            study_design (str): Ex: This study is based on data donated by  21 CureDAO users. Thus, the study design is equivalent to the aggregation of 21 separate n=1 observational natural experiments.
            study_limitations (str): Ex: As with any human experiment, it was impossible to control for all potentially confounding variables.             Correlation does not necessarily imply correlation.  We can never know for sure if one factor is definitely the cause of an outcome.             However, lack of correlation definitely implies the lack of a causal relationship.  Hence, we can with great             confidence rule out non-existent relationships. For instance, if we discover no relationship between mood             and an antidepressant this information is just as or even more valuable than the discovery that there is a relationship.             <br>             <br>             We can also take advantage of several characteristics of time series data from many subjects  to infer the likelihood of a causal relationship if we do find a correlational relationship.             The criteria for causation are a group of minimal conditions necessary to provide adequate evidence of a causal relationship between an incidence and a possible consequence.             The list of the criteria is as follows:             <br>             1. Strength (effect size): A small association does not mean that there is not a causal effect, though the larger the association, the more likely that it is causal.             <br>             2. Consistency (reproducibility): Consistent findings observed by different persons in different places with different samples strengthens the likelihood of an effect.             <br>             3. Specificity: Causation is likely if a very specific population at a specific site and disease with no other likely explanation. The more specific an association between a factor and an effect is, the bigger the probability of a causal relationship.             <br>             4. Temporality: The effect has to occur after the cause (and if there is an expected delay between the cause and expected effect, then the effect must occur after that delay).             <br>             5. Biological gradient: Greater exposure should generally lead to greater incidence of the effect. However, in some cases, the mere presence of the factor can trigger the effect. In other cases, an inverse proportion is observed: greater exposure leads to lower incidence.             <br>             6. Plausibility: A plausible mechanism between cause and effect is helpful.             <br>             7. Coherence: Coherence between epidemiological and laboratory findings increases the likelihood of an effect.             <br>             8. Experiment: \"Occasionally it is possible to appeal to experimental evidence\".             <br>             9. Analogy: The effect of similar factors may be considered.             <br>             <br>              The confidence in a causal relationship is bolstered by the fact that time-precedence was taken into account in all calculations. Furthermore, in accordance with the law of large numbers (LLN), the predictive power and accuracy of these results will continually grow over time.  146 paired data points were used in this analysis.   Assuming that the relationship is merely coincidental, as the participant independently modifies their Very Distracting Time values, the observed strength of the relationship will decline until it is below the threshold of significance.  To it another way, in the case that we do find a spurious correlation, suggesting that banana intake improves mood for instance,             one will likely increase their banana intake.  Due to the fact that this correlation is spurious, it is unlikely             that you will see a continued and persistent corresponding increase in mood.  So over time, the spurious correlation will             naturally dissipate.Furthermore, it will be very enlightening to aggregate this data with the data from other participants  with similar genetic, diseasomic, environmentomic, and demographic profiles.
            study_objective (str): Ex: The objective of this study is to determine the nature of the relationship (if any) between the Very Distracting Time and the Video Activities. Additionally, we attempt to determine the Very Distracting Time values most likely to produce optimal Video Activities values.
            study_results (str): Ex: This analysis suggests that higher Very Distracting Time generally predicts negative Video Activities (p = 0.097). Video Activities is, on average, 36%  higher after around 2.03 Very Distracting Time.  After an onset delay of 168 hours, Video Activities is, on average, 16%  lower than its average over the 168 hours following around 1.04 Very Distracting Time.  146 data points were used in this analysis.  The value for Very Distracting Time changed 2984 times, effectively running 1492 separate natural experiments. The top quartile outcome values are preceded by an average 2.03 h of Very Distracting Time.  The bottom quartile outcome values are preceded by an average 1.04 h of Very Distracting Time.  Forward Pearson Correlation Coefficient was 0.354 (p=0.097, 95% CI -0.437 to 1.144 onset delay = 0 hours, duration of action = 168 hours) .  The Reverse Pearson Correlation Coefficient was 0.208 (P=0.097, 95% CI -0.583 to 0.998, onset delay = -0 hours, duration of action = -168 hours). When the Very Distracting Time value is closer to 2.03 h than 1.04 h, the Video Activities value which follows is, on average, 36% percent higher than its typical value.  When the Very Distracting Time value is closer to 1.04 h than 2.03 h, the Video Activities value which follows is 0% lower than its typical value.  Video Activities is 5 h (67% higher) on average after days with around 5 h Very Distracting Time
            study_title (str): Ex: N1 Study: Very Distracting Time Predicts Negative Video Activities

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            average_effect_following_high_cause_explanation (str): Ex: Overall Mood is 3.55/5 (15% higher) on average after days with around 4.19/5 Sleep Quality. [optional]  # noqa: E501
            average_effect_following_low_cause_explanation (str): Ex: Overall Mood is 2.65/5 (14% lower) on average after days with around 1.97/5 Sleep Quality. [optional]  # noqa: E501
            value_predicting_high_outcome_explanation (str): Ex: Overall Mood, on average, 17% higher after around 4.14/5 Sleep Quality. [optional]  # noqa: E501
            value_predicting_low_outcome_explanation (str): Ex: Overall Mood, on average, 11% lower after around 3.03/5 Sleep Quality. [optional]  # noqa: E501
            data_analysis (str): Ex: It was assumed that 0 hours would pass before a change in Very Distracting Time would produce an observable change in Video Activities.  It was assumed that Very Distracting Time could produce an observable change in Video Activities for as much as 7 days after the stimulus event.. [optional]  # noqa: E501
            data_sources (str): Ex: Very Distracting Time data was primarily collected using <a href=\"https://www.rescuetime.com/rp/curedao/plans\">RescueTime</a>. Detailed reports show which applications and websites you spent time on. Activities are automatically grouped into pre-defined categories with built-in productivity scores covering thousands of websites and applications. You can customize categories and productivity scores to meet your needs.<br>Video Activities data was primarily collected using <a href=\"https://www.rescuetime.com/rp/curedao/plans\">RescueTime</a>. Detailed reports show which applications and websites you spent time on. Activities are automatically grouped into pre-defined categories with built-in productivity scores covering thousands of websites and applications. You can customize categories and productivity scores to meet your needs.. [optional]  # noqa: E501
            data_sources_paragraph_for_cause (str): Ex: Very Distracting Time data was primarily collected using <a href=\"https://www.rescuetime.com/rp/curedao/plans\">RescueTime</a>. Detailed reports show which applications and websites you spent time on. Activities are automatically grouped into pre-defined categories with built-in productivity scores covering thousands of websites and applications. You can customize categories and productivity scores to meet your needs.<br>Video Activities data was primarily collected using <a href=\"https://www.rescuetime.com/rp/curedao/plans\">RescueTime</a>. Detailed reports show which applications and websites you spent time on. Activities are automatically grouped into pre-defined categories with built-in productivity scores covering thousands of websites and applications. You can customize categories and productivity scores to meet your needs.. [optional]  # noqa: E501
            data_sources_paragraph_for_effect (str): Ex: Very Distracting Time data was primarily collected using <a href=\"https://www.rescuetime.com/rp/curedao/plans\">RescueTime</a>. Detailed reports show which applications and websites you spent time on. Activities are automatically grouped into pre-defined categories with built-in productivity scores covering thousands of websites and applications. You can customize categories and productivity scores to meet your needs.<br>Video Activities data was primarily collected using <a href=\"https://www.rescuetime.com/rp/curedao/plans\">RescueTime</a>. Detailed reports show which applications and websites you spent time on. Activities are automatically grouped into pre-defined categories with built-in productivity scores covering thousands of websites and applications. You can customize categories and productivity scores to meet your needs.. [optional]  # noqa: E501
            last_cause_daily_value_sentence_extended (str): Ex: Sleep Quality Predicts Higher Overall Mood. [optional]  # noqa: E501
            last_cause_and_optimal_value_sentence (str): Ex: Sleep Quality Predicts Higher Overall Mood. [optional]  # noqa: E501
            last_cause_daily_value_sentence (str): Ex: Sleep Quality Predicts Higher Overall Mood. [optional]  # noqa: E501
            optimal_daily_value_sentence (str): Ex: Sleep Quality Predicts Higher Overall Mood. [optional]  # noqa: E501
            participant_instructions (str): Instructions for study participation. [optional]  # noqa: E501
            predictor_explanation (str): Ex: Sleep Quality Predicts Higher Overall Mood. [optional]  # noqa: E501
            significance_explanation (str): Ex: Using a two-tailed t-test with alpha = 0.05, it was determined that the change in Video Activities is statistically significant at 95% confidence interval.. [optional]  # noqa: E501
            study_invitation (str): Help us determine if Remeron affects Overall Mood!. [optional]  # noqa: E501
            study_question (str): Does Remeron affect Overall Mood?. [optional]  # noqa: E501
            study_background (str): In order to reduce suffering through the advancement of human knowledge.... [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.study_abstract = study_abstract
        self.study_design = study_design
        self.study_limitations = study_limitations
        self.study_objective = study_objective
        self.study_results = study_results
        self.study_title = study_title
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
